# https://git-scm.com/docs/git-config

# undoing, fixing, or removing commits in git:
# https://sethrobertson.github.io/GitFixUm/fixup.html

[alias]
	a = add
    # List aliases
	aliases = config --get-regexp alias
    # Amend the currently staged files to the latest commit
	amend = commit --amend --no-edit --reuse-message=HEAD
    br = branch
    # Remove branches that have already been merged
	brdm = "!git branch --merged | grep --invert-match '\\*' | xargs --max-args=1 git branch --delete"
    branches = branch --all
    c = commit
    # Commit all changes.
    ca = !git add --all && git commit --verbose --verbose
    # Find commits by source code.
    cfc = "!f() { \
        git log --decorate --pretty=oneliner -S\"$1\"; \
    }; f"
    # Find commits by commit message.
    cfm = "!f() { \
        git log --decorate --pretty=oneliner --grep=\"$1\"; \
    }; f"
    cl = clone
    # `git clean -d --force`: remove untracked files and directories from the working tree
    # `git stash clear`: remove all stashed states
    cleanup = !git clean -d --force && git stash clear
    cm = commit --message
    cmv = commit --no-verify --message
	# Switch to a branch, creating it if necessary
	co = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
	# List contributors with number of commits
	contributors = shortlog --summary --numbered --email
    cp = cherry-pick
    # Credit an author on the latest commit.
    credit = "!f() { \
        if [ -n \"$1\" ] && [ -n \"$2\" ]; then \
            git commit --amend --author \"$1 <$2>\" --no-edit --reuse-message=HEAD; \
        fi \
    }; f"
    # Credit a co-author on the latest commit.
    # https://help.github.com/en/articles/creating-a-commit-with-multiple-authors
    # https://help.github.com/en/articles/creating-a-commit-on-behalf-of-an-organization
    credit-co-author = "!f() { \
        if [ -n \"$1\" ] && [ -n \"$2\" ]; then \
            GIT_EDITOR=\"git interpret-trailers --in-place --trailer='Co-authored-by: $1 <$2>'\" git commit --amend; \
        fi \
    }; f"
    # TODO: check diff commands
    # d = diff -- . ':!*package-lock.json' ':!*yarn.lock'
    # dc = diff --cached -- . ':!*package-lock.json' ':!*yarn.lock'
	# # Show the diff between the latest commit and the current state
	# d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
	# # `git di $number` shows the diff between the state `$number` revisions ago and the current state
	# di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
    dev = checkout development
    f = fetch
    # Allow `$ git git git...`
    git = !exec git
    # # List remote branches.
    rbranches = "!f() { \
        remote=\"${1:-origin}\"; \
        git ls-remote --heads \"$remote\"; \
    }; f"
    lg = log --graph --format=oneliner
    lgs = log --graph --format=onelinersig
    ll = log --format=twoliner
    lls = log --format=twolinersig
    logs = log --show-signature
    l = log --format=oneliner
    ls = log --format=onelinersig
    master = checkout master
    main = checkout main
    mg = merge
    mgv = merge --verify-signatures
    # Merge GitHub pull request on top of the current branch or,
    # if a branch name is specified, on top of the specified branch.
    mpr = "!f() { \
        current_branch=\"$(git symbolic-ref --short HEAD)\"; \
        branch=\"${2:-$current_branch}\"; \
        \
        if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
            git fetch origin refs/pull/$1/head:pr/$1 && \
            git checkout -B \"$branch\" && \
            git rebase \"$branch\" pr/$1 && \
            git checkout -B \"$branch\" && \
            git merge pr/$1 && \
            git branch --delete --force pr/$1 && \
            git commit --amend --message=\"$(git log --max-count=1 --pretty=%B)\n\nClose: #$1\"; \
        fi \
    }; f"
    pl = pull
    ps = push
    remotes = remote --verbose
    rb = rebase
	# Interactive rebase with the given number of latest commits
	rbi = "!f() { git rebase --interactive HEAD~$1; }; f"
	# Overwrite tag locally and remove on origin
	retag = "!f() { \
        git tag --delete $1 || (echo 'tag does not exist. Aborting ...' && exit 1) \
        git push origin :refs/tags/$1 || echo 'tag does not exist on origin. Skipping ...'  \
        git tag $1; \
    }; f"
    s = status --short
    # Create empty commit to let CI skip
    skipci = !git stash --quiet && \
        git commit --no-verify --allow-empty --message 'empty commit to [skip ci]' && \
        git stash pop --quiet
    st = status
    tags = tag --list
    # `git remote prune origin`: remove remote-tracking branches that were deleted from
    # the remote repo
    # `git gc`: cleanup unnecessary files and optimize the local repository
    trim = !git remote prune origin && git gc
    # Undo HEAD~X commit(s) in Y style (default: X=1 Y=soft)
    uncommit = "!f() { \
        amount=\"${1:-1}\"; \
        style=\"${2:-soft}\"; \
        git reset --$style \"HEAD~$amount\"; \
    }; f"
    # Remove file(s) from stage
    unstage = reset HEAD --

[color "branch"]

    current = green bold
    local = brightgreen
    remote = yellow

[color "diff"]

    meta = yellow bold
    frag = magenta bold # line info

    new = brightgreen # additions
    old = brightred # deletions

    newMoved = brightcyan
    oldMoved = brightblue

[color "status"]

    added = brightgreen
    changed = yellow reverse
    untracked = red reverse

[commit]

    gpgSign = false


[core]

    abbrev = 12
    attributesFile = ~/.gitconfig.d/global.gitattributes
    editor = nano
    excludesFile = ~/.gitconfig.d/global.gitignore
    preloadIndex = true
	# Speeds up commands involving untracked files e.g. `git status`.
    # Test if usable with `git update-index --test-untracked-cache`
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true

[diff]

    # Show blocks of moved text of at least 20 alphanumeric characters differently than
    # adds/deletes.
    # https://git-scm.com/docs/git-diff#git-diff-zebra
    colorMoved = zebra
	algorithm = histogram # myers|minimal||patience|histogram

[diff "bin"]

    # diff binary files with `hexdump`
    textconv = hexdump --canonical --no-squeezing

[help]

    # For mistyped commands with one guess git runs this guess automatically.
    # https://git-scm.com/docs/git-config#Documentation/git-config.txt-helpautoCorrect
    autoCorrect = 20

[init]

    defaultBranch = main

[merge]

    # Include subjects of merged commits in merge commit message
	log = 1024

[pretty]
    # %h abbr hash
    # %d refs (branch, heads or tags) with ()
    # %s subject from message
    # %cr relative date (committer)
    # %cs isodate (committer)
    # %an author name
    # https://git-scm.com/docs/pretty-formats
    oneliner    = "%C(red)%h%C(reset) %C(yellow)%d%C(reset) %s %C(green)(%cr) %C(blue)<%an>%C(reset)"
    onelinerSig = "%C(red)%h%C(reset) %C(yellow)%d%C(reset) %s %C(green)(%cr) %C(blue)<%an>%C(reset) %C(magenta)GPG: %G?"
    twoliner    = "%C(red)%h%C(reset)  %s %C(yellow)%d%C(reset) %n    %C(green)%ci %C(blue)<%an>%C(reset)%n"
    twolinerSig = "%C(red)%h%C(reset)  %s %C(yellow)%d%C(reset) %n    %C(green)%ci %C(blue)<%an>%C(reset) %C(magenta)GPG: %G? [%GT] %GS%C(reset)%n"

[pull]

    ff = only

[push]

	# https://git-scm.com/docs/git-config#Documentation/git-config.txt-pushdefault
	default = simple
    # Push relevant annotated tags also
    followTags = true

[tag]

    gpgSign = false

[user]

    # DO NOT store your user data (e.g. `name` / `email` / `signingkey`) here.
    # The dotfile installer script will prompt for those data and adds them to
    # `~/.gitconfig.d/user.gitconfig`

    # Do not guess the user's identity.
    # https://github.com/git/git/blob/90f7b16b3adc78d4bbabbd426fb69aa78c714f71/Documentation/config.txt#L2847-L2855
    useConfigOnly = true

[url "git@github.com:"]

    # Shortcut for github URLs with SSH
	insteadOf = "gh:"
    # Use SSH instead of git://
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

    # Shortcut for github URLs with git://
	insteadOf = "github:"

[url "git@gist.github.com:"]

    # Shortcut for github gist URLs with SSH
	insteadOf = "gst:"
    # Use SSH instead of git://
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

    # Shortcut for github gist URLs with git://
    insteadOf = "gist:"

[include]

    # https://git-scm.com/docs/git-config#_includes

    # Load user data (see [user] above)
    path = ~/.gitconfig.d/user.gitconfig

    # Load local config. Use this file to overwrite configs set above
	path = ~/.gitconfig.d/local.gitconfig
